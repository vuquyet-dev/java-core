package Java8Features;

import java.util.function.*;

public class FunctionalInterfaces {
    public static void main(String[] args) {
        // ‚úÖ Function: nh·∫≠n 1 gi√° tr·ªã ki·ªÉu T, tr·∫£ v·ªÅ gi√° tr·ªã ki·ªÉu R
        // Th∆∞·ªùng d√πng ƒë·ªÉ bi·∫øn ƒë·ªïi d·ªØ li·ªáu (v√≠ d·ª•: Integer -> String).
        Function<Integer, String> intToString = n -> "S·ªë: " + n;
        System.out.println(intToString.apply(5)); // apply(): th·ª±c thi function

        // S·ª≠ d·ª•ng andThen: sau khi intToString ch·∫°y xong, ti·∫øp t·ª•c th·ª±c hi·ªán h√†m kh√°c
        Function<Integer, String> intToStringThenExcited = intToString.andThen(s -> s + "!!!");
        System.out.println(intToStringThenExcited.apply(7)); // (7 -> "S·ªë: 7" -> "S·ªë: 7!!!")

        // S·ª≠ d·ª•ng compose: th·ª±c hi·ªán h√†m tr∆∞·ªõc r·ªìi m·ªõi ƒë·∫øn intToString
        Function<Double, Integer> doubleToInt = d -> (int) Math.round(d);
        Function<Double, String> doubleToString = intToString.compose(doubleToInt);
        System.out.println(doubleToString.apply(6.8)); // (6.8 -> 7 -> "S·ªë: 7")

        // ‚úÖ BiFunction: nh·∫≠n 2 gi√° tr·ªã (T, U), tr·∫£ v·ªÅ 1 gi√° tr·ªã R
        // D√πng khi c·∫ßn x·ª≠ l√Ω 2 gi√° tr·ªã ƒë·∫ßu v√†o c√πng l√∫c.
        BiFunction<Integer, Integer, String> addToString = (a, b) -> "T·ªïng: " + (a + b);
        System.out.println(addToString.apply(3, 4)); // apply(): t√≠nh t·ªïng r·ªìi tr·∫£ chu·ªói

        // ‚úÖ Predicate: nh·∫≠n 1 gi√° tr·ªã, tr·∫£ v·ªÅ boolean (true/false)
        // Th∆∞·ªùng d√πng ƒë·ªÉ ki·ªÉm tra ƒëi·ªÅu ki·ªán, l·ªçc d·ªØ li·ªáu.
        Predicate<Integer> isEven = n -> n % 2 == 0;
        System.out.println("8 ch·∫µn? " + isEven.test(8)); // test(): ki·ªÉm tra ƒëi·ªÅu ki·ªán
        System.out.println("5 ch·∫µn? " + isEven.test(5));

        // and(): k·∫øt h·ª£p 2 Predicate, ph·∫£i th·ªèa m√£n c·∫£ 2 ƒëi·ªÅu ki·ªán
        Predicate<Integer> isPositive = n -> n > 0;
        Predicate<Integer> isPositiveEven = isEven.and(isPositive);
        System.out.println("4 ch·∫µn & d∆∞∆°ng? " + isPositiveEven.test(4)); // true
        System.out.println("-2 ch·∫µn & d∆∞∆°ng? " + isPositiveEven.test(-2)); // false

        // or(): ch·ªâ c·∫ßn 1 ƒëi·ªÅu ki·ªán ƒë√∫ng
        Predicate<Integer> isNegative = n -> n < 0;
        Predicate<Integer> isEvenOrNegative = isEven.or(isNegative);
        System.out.println("-3 ch·∫µn ho·∫∑c √¢m? " + isEvenOrNegative.test(-3)); // true
        System.out.println("7 ch·∫µn ho·∫∑c √¢m? " + isEvenOrNegative.test(7));   // false

        // negate(): ph·ªß ƒë·ªãnh k·∫øt qu·∫£ Predicate
        Predicate<Integer> isOdd = isEven.negate();
        System.out.println("3 l·∫ª? " + isOdd.test(3)); // true

        // ‚úÖ BiPredicate: nh·∫≠n 2 gi√° tr·ªã (T, U), tr·∫£ v·ªÅ boolean
        // D√πng ƒë·ªÉ ki·ªÉm tra ƒëi·ªÅu ki·ªán v·ªõi 2 ƒë·∫ßu v√†o c√πng l√∫c.
        BiPredicate<String, Integer> hasLength = (s, len) -> s.length() == len;
        System.out.println("Hello d√†i 5? " + hasLength.test("Hello", 5));

        // ‚úÖ Consumer: nh·∫≠n 1 gi√° tr·ªã, th·ª±c hi·ªán h√†nh ƒë·ªông, KH√îNG tr·∫£ k·∫øt qu·∫£
        // Th∆∞·ªùng d√πng cho in/log/ghi file...
        Consumer<String> printUpper = s -> System.out.println("In: " + s.toUpperCase());
        printUpper.accept("hello lambda"); // accept(): th·ª±c thi consumer

        // ‚úÖ BiConsumer: gi·ªëng Consumer nh∆∞ng nh·∫≠n 2 gi√° tr·ªã, kh√¥ng tr·∫£ k·∫øt qu·∫£
        // D√πng khi mu·ªën x·ª≠ l√Ω 2 gi√° tr·ªã c√πng l√∫c (in key-value, vv).
        BiConsumer<String, Integer> printKeyValue = (k, v) -> System.out.println("Key: " + k + ", Value: " + v);
        printKeyValue.accept("Age", 25);

        // ‚úÖ Supplier: kh√¥ng nh·∫≠n gi√° tr·ªã n√†o, tr·∫£ v·ªÅ 1 gi√° tr·ªã T
        // Th∆∞·ªùng d√πng ƒë·ªÉ cung c·∫•p d·ªØ li·ªáu (v√≠ d·ª•: t·∫°o s·ªë random, l·∫•y t·ª´ c·∫•u h√¨nh...).
        Supplier<Integer> randomSupplier = () -> (int) (Math.random() * 100 + 1);
        System.out.println("Random: " + randomSupplier.get()); // get(): tr·∫£ gi√° tr·ªã t·ª´ supplier

        // ‚úÖ UnaryOperator: gi·ªëng Function<T, T>, nh·∫≠n 1 gi√° tr·ªã, tr·∫£ v·ªÅ c√πng ki·ªÉu
        // D√πng khi bi·∫øn ƒë·ªïi gi√° tr·ªã m√† kh√¥ng ƒë·ªïi ki·ªÉu.
        UnaryOperator<String> addExclamation = s -> s + "!";
        System.out.println(addExclamation.apply("Wow")); // apply(): th·ª±c thi unary

        // ‚úÖ BinaryOperator: gi·ªëng BiFunction<T, T, T>, nh·∫≠n 2 gi√° tr·ªã c√πng ki·ªÉu, tr·∫£ v·ªÅ c√πng ki·ªÉu
        // D√πng cho ph√©p to√°n gi·ªØa 2 gi√° tr·ªã c√πng lo·∫°i (t√¨m max, c·ªông, nh√¢n...).
        BinaryOperator<Integer> max = (a, b) -> a > b ? a : b;
        System.out.println("Max(10, 20): " + max.apply(10, 20));

        // andThen() trong UnaryOperator: k·∫øt h·ª£p nhi·ªÅu b∆∞·ªõc x·ª≠ l√Ω li√™n ti·∫øp
        UnaryOperator<String> toUpper = String::toUpperCase;
// ‚úÖ ƒê√¢y l√† m·ªôt UnaryOperator nh·∫≠n v√†o m·ªôt String, tr·∫£ v·ªÅ String ƒë√£ vi·∫øt hoa.
// S·ª≠ d·ª•ng method reference String::toUpperCase t∆∞∆°ng ƒë∆∞∆°ng v·ªõi lambda s -> s.toUpperCase()

        Function<String, String> shout = addExclamation.andThen(toUpper);
// ‚úÖ addExclamation l√† UnaryOperator<String> tr∆∞·ªõc ƒë√≥ (s -> s + "!").
// ‚úÖ addExclamation.andThen(toUpper) nghƒ©a l√†:
//   1Ô∏è‚É£ ƒê·∫ßu ti√™n th·ª±c thi addExclamation: th√™m d·∫•u "!" v√†o cu·ªëi chu·ªói.
//   2Ô∏è‚É£ Sau ƒë√≥ th·ª±c thi toUpper: vi·∫øt hoa chu·ªói k·∫øt qu·∫£.
// üëâ V√≠ d·ª•: "amazing" -> "amazing!" -> "AMAZING!"

        System.out.println(shout.apply("amazing")); // amazing -> amazing! -> AMAZING!
    }
}
