package dataStructures;

import java.util.*;
/**
 * ‚úÖ LinkedHashSet ‚Äì L·ªõp t·∫≠p h·ª£p kh√¥ng cho ph√©p ph·∫ßn t·ª≠ tr√πng l·∫∑p v√† **duy tr√¨ th·ª© t·ª± ch√®n**.
 * üîπ C√°c ƒë·∫∑c ƒëi·ªÉm ch√≠nh:
 *   - Kh√¥ng ch·ª©a ph·∫ßn t·ª≠ tr√πng.
 *   - Duy tr√¨ **th·ª© t·ª± th√™m v√†o** (kh√°c v·ªõi HashSet).
 *   - Duy·ªát nhanh v√† ·ªïn ƒë·ªãnh h∆°n HashSet n·∫øu c·∫ßn gi·ªØ th·ª© t·ª±.
 *   - Kh√¥ng cho ph√©p truy c·∫≠p b·∫±ng ch·ªâ s·ªë (index).
 */
public class LinkedHashSetClass {
    public static void main(String[] args) {
        try {
            // 1. Kh·ªüi t·∫°o LinkedHashSet
            LinkedHashSet<String> productSet = new LinkedHashSet<>();

            // 1. Th√™m s·∫£n ph·∫©m (.add)
            System.out.println("\n1. Add products:");
            productSet.add("Tr√† ƒë√†o");
            productSet.add("C√† ph√™ s·ªØa");
            productSet.add("Ph·ªü g√†");
            productSet.add("C∆°m chi√™n");
            productSet.add("B√∫n b√≤ Hu·∫ø");
            System.out.println("‚ûï Products: " + productSet);

            // 2. Th√™m ph·∫ßn t·ª≠ tr√πng
            System.out.println("\n2. Add duplicate 'Tr√† ƒë√†o':");
            boolean added = productSet.add("Tr√† ƒë√†o");
            System.out.println(added ? "‚úÖ Added" : "‚ùå Duplicate not added");
            System.out.println("üì¶ Current set: " + productSet);

            // 3. Xo√° s·∫£n ph·∫©m (.remove)
            System.out.println("\n3. Remove 'Ph·ªü g√†':");
            productSet.remove("Ph·ªü g√†");
            System.out.println("‚ùå After removal: " + productSet);

            // 4. Ki·ªÉm tra t·ªìn t·∫°i (.contains)
            System.out.println("\n4. Contains 'C∆°m chi√™n'? " + productSet.contains("C∆°m chi√™n"));

            // 5. Duy·ªát b·∫±ng for-each
            System.out.println("\n5. Browse with for-each:");
            for (String product : productSet) {
                System.out.println("üî∏ " + product);
            }

            // 6. Duy·ªát b·∫±ng Iterator
            System.out.println("\n6. Browse with Iterator:");
            Iterator<String> iterator = productSet.iterator();
            while (iterator.hasNext()) {
                System.out.println("‚û°Ô∏è " + iterator.next());
            }

            // 7. ƒê·∫øm s·ªë ph·∫ßn t·ª≠ (.size)
            System.out.println("\n7. Total products: " + productSet.size());

            // 8. Clone LinkedHashSet
            LinkedHashSet<String> cloneSet = new LinkedHashSet<>(productSet);
            System.out.println("\n8. Clone set: " + cloneSet);

            // 9. Gi·ªØ l·∫°i ph·∫ßn t·ª≠ chung (.retainAll)
            LinkedHashSet<String> keepSet = new LinkedHashSet<>(Arrays.asList("C√† ph√™ s·ªØa", "Tr√† ƒë√†o"));
            productSet.retainAll(keepSet);
            System.out.println("\n9. After retainAll: " + productSet);

            // 10. Xo√° t·∫•t c·∫£ ph·∫ßn t·ª≠ c·ª• th·ªÉ (.removeAll)
            productSet.removeAll(Collections.singleton("C√† ph√™ s·ªØa"));
            System.out.println("\n10. After removing 'C√† ph√™ s·ªØa': " + productSet);

            // 11. Xo√° to√†n b·ªô (.clear)
            productSet.clear();
            System.out.println("\n11. After clear: " + productSet);

            // 12. Ki·ªÉm tra r·ªóng (.isEmpty)
            System.out.println("\n12. Is set empty? " + (productSet.isEmpty() ? "‚úÖ Yes" : "‚ùå No"));

        } catch (Exception ex) {
            System.out.println("‚ùó Error: " + ex.getMessage());
        }
    }
}
