package dataStructures;

import java.util.*;
/**
 * ‚úÖ LinkedList l√† m·ªôt c·∫•u tr√∫c d·ªØ li·ªáu tuy·∫øn t√≠nh trong Java, ho·∫°t ƒë·ªông theo d·∫°ng danh s√°ch li√™n k·∫øt ƒë√¥i (doubly linked list).
 *
 * üîπ ƒê·∫∑c ƒëi·ªÉm ch√≠nh:
 * - Cho ph√©p th√™m/xo√° ph·∫ßn t·ª≠ nhanh ·ªü ƒë·∫ßu ho·∫∑c cu·ªëi danh s√°ch (O(1)).
 * - Kh√¥ng gi·ªØ th·ª© t·ª± c·ªë ƒë·ªãnh trong b·ªô nh·ªõ nh∆∞ ArrayList.
 * - Kh√¥ng gi·ªõi h·∫°n k√≠ch th∆∞·ªõc (t·ª± ƒë·ªông co gi√£n).
 * - Cho ph√©p ph·∫ßn t·ª≠ tr√πng l·∫∑p.
 * - H·ªó tr·ª£ t·∫•t c·∫£ c√°c ph∆∞∆°ng th·ª©c c·ªßa List v√† Queue.
 *
 * üîß Khi n√™n d√πng LinkedList:
 * - Khi c·∫ßn thao t√°c ch√®n/xo√° nhi·ªÅu ·ªü ƒë·∫ßu/cu·ªëi danh s√°ch.
 * - Khi kh√¥ng c·∫ßn truy c·∫≠p ng·∫´u nhi√™n th∆∞·ªùng xuy√™n (v√¨ .get(index) ch·∫≠m h∆°n ArrayList).
 *
 * üìå Nh∆∞·ª£c ƒëi·ªÉm:
 * - Truy c·∫≠p theo ch·ªâ s·ªë ch·∫≠m h∆°n ArrayList do ph·∫£i duy·ªát t·ª´ng node.
 */

public class LinkedListClass {
    public static void main(String[] args) {
        try {
            LinkedList<String> foodList = new LinkedList<>();

            // 1. Th√™m m√≥n ƒÉn v√†o cu·ªëi danh s√°ch (.add)
            System.out.println("1Ô∏è‚É£ Add foods:");
            foodList.add("B√°nh m√¨");
            foodList.add("C∆°m g√†");
            foodList.add("Ph·ªü b√≤");
            foodList.add("Tr√† s·ªØa");
            System.out.println("üçΩÔ∏è Food list: " + foodList);

            // 2. Th√™m m√≥n v√†o ƒë·∫ßu v√† cu·ªëi (.addFirst, .addLast)
            foodList.addFirst("Ch√°o l√≤ng");
            foodList.addLast("B√∫n ƒë·∫≠u m·∫Øm t√¥m");
            System.out.println("\n2Ô∏è‚É£ After addFirst & addLast: " + foodList);

            // 3. L·∫•y m√≥n ƒë·∫ßu v√† cu·ªëi (.getFirst, .getLast)
            System.out.println("\n3Ô∏è‚É£ First food: " + foodList.getFirst());
            System.out.println("Last food: " + foodList.getLast());

            // 4. L·∫•y m√≥n ·ªü v·ªã tr√≠ b·∫•t k·ª≥ (.get)
            System.out.println("\n4Ô∏è‚É£ Food at index 3: " + foodList.get(3));

            // 5. Thay ƒë·ªïi m√≥n ƒÉn (.set)
            foodList.set(2, "B√°nh cu·ªën");
            System.out.println("\n5Ô∏è‚É£ After update index 2: " + foodList);

            // 6. Xo√° m√≥n ƒÉn ƒë·∫ßu/cu·ªëi (.removeFirst, .removeLast)
            foodList.removeFirst();
            foodList.removeLast();
            System.out.println("\n6Ô∏è‚É£ After removeFirst & removeLast: " + foodList);

            // 7. Xo√° m√≥n b·∫•t k·ª≥ theo ch·ªâ s·ªë ho·∫∑c t√™n (.remove, .remove(index))
            foodList.remove("Tr√† s·ªØa");
            foodList.remove(1); // xo√° theo index
            System.out.println("\n7Ô∏è‚É£ After removing by name & index: " + foodList);

            // 8. Duy·ªát danh s√°ch v·ªõi for-each
            System.out.println("\n8Ô∏è‚É£ Browse with for-each:");
            for (String food : foodList) {
                System.out.println("üîπ " + food);
            }

            // 9. Duy·ªát b·∫±ng Iterator
            System.out.println("\n9Ô∏è‚É£ Browse with Iterator:");
            Iterator<String> it = foodList.iterator();
            while (it.hasNext()) {
                System.out.println("‚û°Ô∏è " + it.next());
            }

            // 10. Ki·ªÉm tra t·ªìn t·∫°i m√≥n (.contains)
            System.out.println("\nüîü Contains 'Ph·ªü b√≤'? " + foodList.contains("Ph·ªü b√≤"));

            // 11. T√¨m v·ªã tr√≠ ƒë·∫ßu v√† cu·ªëi c·ªßa m√≥n (.indexOf, .lastIndexOf)
            foodList.add("B√°nh cu·ªën");
            System.out.println("\n1Ô∏è‚É£1Ô∏è‚É£ First index of 'B√°nh cu·ªën': " + foodList.indexOf("B√°nh cu·ªën"));
            System.out.println("Last index of 'B√°nh cu·ªën': " + foodList.lastIndexOf("B√°nh cu·ªën"));

            // 12. ƒê·∫øm s·ªë l∆∞·ª£ng m√≥n (.size)
            System.out.println("\n1Ô∏è‚É£2Ô∏è‚É£ Total foods: " + foodList.size());

            // 13. S·∫Øp x·∫øp A-Z (Collections.sort)
            Collections.sort(foodList);
            System.out.println("\n1Ô∏è‚É£3Ô∏è‚É£ Sorted foods: " + foodList);

            // 14. Chuy·ªÉn sang m·∫£ng (.toArray)
            System.out.println("\n1Ô∏è‚É£4Ô∏è‚É£ Convert to array:");
            Object[] arr = foodList.toArray();
            for (Object o : arr) {
                System.out.println("üçú " + o);
            }

            // 15. Sao ch√©p danh s√°ch (.clone)
            LinkedList<String> cloneList = (LinkedList<String>) foodList.clone();
            System.out.println("\n1Ô∏è‚É£5Ô∏è‚É£ Cloned list: " + cloneList);

            // 16. So s√°nh hai danh s√°ch (.equals)
            System.out.println("\n1Ô∏è‚É£6Ô∏è‚É£ Is equal to cloned list? " + (foodList.equals(cloneList) ? "‚úÖ Equal" : "‚ùå Not equal"));

            // 17. Xo√° t·∫•t c·∫£ m√≥n (.clear) v√† ki·ªÉm tra r·ªóng (.isEmpty)
            foodList.clear();
            System.out.println("\n1Ô∏è‚É£7Ô∏è‚É£ Cleared list: " + foodList);
            System.out.println("Is list empty? " + (foodList.isEmpty() ? "‚úÖ Yes" : "‚ùå No"));

        } catch (Exception ex) {
            System.out.println("‚ùó Error: " + ex.getMessage());
        }
    }
}
