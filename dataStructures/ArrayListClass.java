package dataStructures;

import java.util.*;
/**
 * ‚úÖ ArrayList l√† m·ªôt l·ªõp trong Java ƒë·∫°i di·ªán cho danh s√°ch (List) ƒë·ªông, n·∫±m trong g√≥i java.util.
 *
 * üîπ ƒê·∫∑c ƒëi·ªÉm ch√≠nh:
 * - D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u tr·ªØ theo ch·ªâ s·ªë, t∆∞∆°ng t·ª± m·∫£ng.
 * - Cho ph√©p ph·∫ßn t·ª≠ tr√πng l·∫∑p v√† duy tr√¨ th·ª© t·ª± ch√®n (insertion order).
 * - T·ª± ƒë·ªông thay ƒë·ªïi k√≠ch th∆∞·ªõc khi th√™m/xo√° ph·∫ßn t·ª≠.
 * - H·ªó tr·ª£ truy c·∫≠p ng·∫´u nhi√™n nhanh qua ch·ªâ s·ªë (O(1)).
 *
 * üîß Khi n√™n d√πng ArrayList:
 * - Khi c·∫ßn truy c·∫≠p nhanh theo ch·ªâ s·ªë (get/set).
 * - Khi s·ªë l·∫ßn th√™m/xo√° kh√¥ng qu√° nhi·ªÅu ho·∫∑c ch·ªß y·∫øu l√† ·ªü cu·ªëi danh s√°ch.
 * - Khi c·∫ßn l∆∞u tr·ªØ danh s√°ch c√≥ tr·∫≠t t·ª± c·ª• th·ªÉ (v√≠ d·ª•: danh s√°ch s·∫£n ph·∫©m, danh s√°ch sinh vi√™n).
 *
 * üìå Nh∆∞·ª£c ƒëi·ªÉm:
 * - Th√™m/xo√° ·ªü ƒë·∫ßu ho·∫∑c gi·ªØa danh s√°ch c√≥ th·ªÉ ch·∫≠m v√¨ ph·∫£i d·ªùi c√°c ph·∫ßn t·ª≠ (O(n)).
 * - Kh√¥ng ƒë·ªìng b·ªô (n·∫øu d√πng ƒëa lu·ªìng c·∫ßn d√πng Collections.synchronizedList ho·∫∑c CopyOnWriteArrayList).
 *
 * ‚ú® Ghi ch√∫:
 * - ArrayList tri·ªÉn khai interface List n√™n c√≥ th·ªÉ d√πng ƒëa h√¨nh v·ªõi List<String>, List<Integer>, v.v.
 * - ArrayList kh√¥ng gi·ªõi h·∫°n k√≠ch th∆∞·ªõc c·ª• th·ªÉ (nh∆∞ng ph·ª• thu·ªôc v√†o b·ªô nh·ªõ h·ªá th·ªëng).
 */

public class ArrayListClass {
    public static void main(String[] args) {
        try {
            ArrayList<String> productList = new ArrayList<>();

            // 1. Add products (.add())
            System.out.println("\n1. Add products");
            productList.add("C√† ph√™ s·ªØa");
            productList.add("Tr√† ƒë√†o");
            productList.add("B√°nh m√¨ th·ªãt");
            productList.add("C∆°m t·∫•m");
            productList.add("Ph·ªü b√≤");
            productList.add("Tr√† s·ªØa tr√¢n ch√¢u");
            productList.add("B√∫n ch·∫£");
            productList.add("Pizza h·∫£i s·∫£n");
            System.out.println("‚ûï Added products: " + productList);
            // 2. Get product at specific index (.get())
            System.out.println("\n2. Get product at index 3:");
            System.out.println("üì¶ " + productList.get(3)); // C∆°m t·∫•m

            // 3. Edit product name (.set(index, value))
            System.out.println("\n3. Edit product at index 2:");
            productList.set(2, "B√°nh m√¨ chay");
            System.out.println("üìù Updated list: " + productList);

            // 4. Delete by index or by name (.remove())
            System.out.println("\n4. Delete by index and name:");
            productList.remove(4); // Remove Ph·ªü b√≤
            productList.remove("B√∫n ch·∫£");
            System.out.println("‚ùå After deletion: " + productList);

            // 5. Search for product index (.indexOf(), .lastIndexOf())
            System.out.println("\n5. Search for index of 'Tr√† ƒë√†o':");
            productList.add("Tr√† ƒë√†o"); // Th√™m l·∫°i ƒë·ªÉ ki·ªÉm tra lastIndexOf
            System.out.println("First index: " + productList.indexOf("Tr√† ƒë√†o"));
            System.out.println("Last index: " + productList.lastIndexOf("Tr√† ƒë√†o"));

            // 6. Check for existence (.contains())
            System.out.println("\n6. Contains 'Pizza h·∫£i s·∫£n'? " + productList.contains("Pizza h·∫£i s·∫£n"));

            // 7. Browse with for-each, for, iterator
            System.out.println("\n7. Browse with for-each:");
            for (String product : productList) {
                System.out.println("üî∏ " + product);
            }

            System.out.println("\nBrowse with classic for:");
            for (int i = 0; i < productList.size(); i++) {
                System.out.println("üîπ " + productList.get(i));
            }

            System.out.println("\nBrowse with iterator:");
            Iterator<String> iterator = productList.iterator();
            while (iterator.hasNext()) {
                System.out.println("‚û°Ô∏è " + iterator.next());
            }

            // 8. Count total products (.size())
            System.out.println("\n8. Total products: " + productList.size());

            // 9. Sort A-Z (Collections.sort())
            Collections.sort(productList);
            System.out.println("\n9. Sorted list (A-Z): " + productList);

            // 10. Clone list (.clone())
            ArrayList<String> cloneList = (ArrayList<String>) productList.clone();
            System.out.println("\n10. Clone of list: " + cloneList);

            // 11. Merge with another list (.addAll())
            ArrayList<String> newList = new ArrayList<>();
            newList.add("Ch√°o g√†");
            newList.add("M√¨ x√†o b√≤");
            productList.addAll(newList);
            System.out.println("\n11. After merging new list: " + productList);

            // 12. Keep common elements (.retainAll())
            ArrayList<String> keepList = new ArrayList<>(Arrays.asList("Tr√† ƒë√†o", "Pizza h·∫£i s·∫£n", "Ch√°o g√†"));
            productList.retainAll(keepList);
            System.out.println("\n12. After retaining common items: " + productList);

            // 13. Remove specific values (.removeAll())
            productList.removeAll(Collections.singleton("Tr√† ƒë√†o"));
            System.out.println("\n13. After removing 'Tr√† ƒë√†o': " + productList);

            // 14. Convert to array (.toArray())
            System.out.println("\n14. Convert to array:");
            Object[] array = productList.toArray();
            for (Object obj : array) {
                System.out.println("üîπ " + obj);
            }

            // 15. Compare 2 lists (.equals())
            System.out.println("\n15. Compare with clone list:");
            System.out.println(productList.equals(cloneList) ? "‚úÖ Equal" : "‚ùå Not equal");

            // 16. Clear list (.clear())
            productList.clear();
            System.out.println("\n16. Cleared list: " + productList);

            // 17. Check if empty (.isEmpty())
            System.out.println("\n17. Is list empty? " + (productList.isEmpty() ? "‚úÖ Yes" : "‚ùå No"));

        } catch (Exception ex) {
            System.out.println("‚ùó Error: " + ex.getMessage());
        }
    }
}
