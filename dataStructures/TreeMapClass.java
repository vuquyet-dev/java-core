package dataStructures;

import java.util.*;

/**
 * ‚úÖ TreeMap ‚Äì C·∫•u tr√∫c Map l∆∞u c√°c c·∫∑p key-value v√† **t·ª± ƒë·ªông s·∫Øp x·∫øp key theo th·ª© t·ª± tƒÉng d·∫ßn**.
 *
 * üîπ ƒê·∫∑c ƒëi·ªÉm:
 *   - L∆∞u tr·ªØ d·ªØ li·ªáu d∆∞·ªõi d·∫°ng c·∫∑p `key-value`.
 *   - C√°c key ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ª© t·ª± t·ª± nhi√™n (ho·∫∑c theo Comparator t√πy ch·ªçn).
 *   - Duy·ªát c√°c ph·∫ßn t·ª≠ theo th·ª© t·ª± c·ªßa key.
 *   - Kh√¥ng cho ph√©p key l√† null, nh∆∞ng value c√≥ th·ªÉ l√† null.
 *
 * ‚ú® ∆Øu ƒëi·ªÉm:
 *   - T·ª± ƒë·ªông **duy tr√¨ th·ª© t·ª± key tƒÉng d·∫ßn**, thu·∫≠n ti·ªán khi c·∫ßn d·ªØ li·ªáu c√≥ t·ªï ch·ª©c.
 *   - H·ªó tr·ª£ nhanh c√°c thao t√°c nh∆∞ t√¨m ph·∫ßn t·ª≠ nh·ªè nh·∫•t/l·ªõn nh·∫•t (`firstKey()`, `lastKey()`).
 *   - Ph√π h·ª£p v·ªõi c√°c b√†i to√°n t√¨m ki·∫øm nh·ªã ph√¢n ho·∫∑c c√¢y c√¢n b·∫±ng (v√≠ d·ª•: t·ª´ ƒëi·ªÉn, b·∫£ng m√£).
 *
 * ‚ö†Ô∏è Nh∆∞·ª£c ƒëi·ªÉm:
 *   - T·ªëc ƒë·ªô ch·∫≠m h∆°n `HashMap` do ph·∫£i duy tr√¨ th·ª© t·ª± s·∫Øp x·∫øp (O(log n)).
 *   - Kh√¥ng cho ph√©p key l√† null (n·∫øu d√πng s·∫Ω g√¢y l·ªói NullPointerException).
 *   - Dung l∆∞·ª£ng b·ªô nh·ªõ cao h∆°n trong tr∆∞·ªùng h·ª£p d·ªØ li·ªáu l·ªõn so v·ªõi `HashMap`.
 */

public class TreeMapClass {
    public static void main(String[] args) {
        try {
            // 1. Kh·ªüi t·∫°o TreeMap
            TreeMap<String, String> menuMap = new TreeMap<>();

            // 1. Th√™m d·ªØ li·ªáu (.put)
            System.out.println("\n1. Add items:");
            menuMap.put("B01", "Ph·ªü b√≤");
            menuMap.put("C02", "C∆°m t·∫•m");
            menuMap.put("T03", "Tr√† ƒë√†o");
            menuMap.put("B02", "B√∫n ch·∫£");
            menuMap.put("C01", "Ch√°o g√†");
            System.out.println("üì¶ Menu: " + menuMap);

            // 2. Truy c·∫≠p theo key (.get)
            System.out.println("\n2. Get item with key 'C02':");
            System.out.println("üîπ " + menuMap.get("C02"));

            // 3. Ki·ªÉm tra t·ªìn t·∫°i key/value
            System.out.println("\n3. Contains key 'T03'? " + menuMap.containsKey("T03"));
            System.out.println("Contains value 'B√∫n ch·∫£'? " + menuMap.containsValue("B√∫n ch·∫£"));

            // 4. C·∫≠p nh·∫≠t value (.put)
            System.out.println("\n4. Update item with key 'B02':");
            menuMap.put("B02", "B√∫n b√≤ Hu·∫ø");
            System.out.println("üìù Updated menu: " + menuMap);

            // 5. Xo√° ph·∫ßn t·ª≠ (.remove)
            System.out.println("\n5. Remove item with key 'C01':");
            menuMap.remove("C01");
            System.out.println("‚ùå After removal: " + menuMap);

            // 6. Duy·ªát b·∫±ng for-each
            System.out.println("\n6. Browse with for-each:");
            for (Map.Entry<String, String> entry : menuMap.entrySet()) {
                System.out.println("üî∏ Code: " + entry.getKey() + ", Name: " + entry.getValue());
            }

            // 7. Duy·ªát b·∫±ng iterator
            System.out.println("\n7. Browse with iterator:");
            Iterator<Map.Entry<String, String>> iterator = menuMap.entrySet().iterator();
            while (iterator.hasNext()) {
                Map.Entry<String, String> entry = iterator.next();
                System.out.println("‚û°Ô∏è " + entry.getKey() + ": " + entry.getValue());
            }

            // 8. L·∫•y key ƒë·∫ßu v√† cu·ªëi (.firstKey, .lastKey)
            System.out.println("\n8. First key: " + menuMap.firstKey());
            System.out.println("Last key: " + menuMap.lastKey());

            // 9. Clone TreeMap
            TreeMap<String, String> cloneMap = new TreeMap<>(menuMap);
            System.out.println("\n9. Clone map: " + cloneMap);

            // 10. Xo√° to√†n b·ªô (.clear)
            menuMap.clear();
            System.out.println("\n10. Cleared map: " + menuMap);

            // 11. Ki·ªÉm tra r·ªóng (.isEmpty)
            System.out.println("\n11. Is map empty? " + (menuMap.isEmpty() ? "‚úÖ Yes" : "‚ùå No"));

        } catch (Exception ex) {
            System.out.println("‚ùó Error: " + ex.getMessage());
        }
    }
}
