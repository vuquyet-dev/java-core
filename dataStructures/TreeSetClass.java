package dataStructures;

import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.TreeSet;

/**
 * ‚úÖ TreeSet l√† m·ªôt l·ªõp trong Java ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l∆∞u tr·ªØ c√°c ph·∫ßn t·ª≠ duy nh·∫•t (gi·ªëng HashSet),
 * nh∆∞ng **c√≥ th·ª© t·ª± tƒÉng d·∫ßn (sorted)** theo th·ª© t·ª± t·ª± nhi√™n ho·∫∑c comparator t√πy ch·ªânh.
 *
 * üîπ ƒê·∫∑c ƒëi·ªÉm ch√≠nh:
 * - Kh√¥ng cho ph√©p ph·∫ßn t·ª≠ tr√πng l·∫∑p (gi·ªëng HashSet).
 * - C√°c ph·∫ßn t·ª≠ ƒë∆∞·ª£c **t·ª± ƒë·ªông s·∫Øp x·∫øp** (tƒÉng d·∫ßn theo Comparable ho·∫∑c Comparator).
 * - Kh√¥ng cho ph√©p ph·∫ßn t·ª≠ null n·∫øu so s√°nh ƒë∆∞·ª£c (s·∫Ω g√¢y l·ªói NullPointerException).
 * - D·ª±a tr√™n c·∫•u tr√∫c **c√¢y ƒë·ªè-ƒëen (Red-Black Tree)** n√™n hi·ªáu nƒÉng c√°c thao t√°c ch√≠nh l√† O(log n).
 *
 * üîß Khi n√™n d√πng TreeSet:
 * - Khi c·∫ßn m·ªôt t·∫≠p h·ª£p duy nh·∫•t nh∆∞ng **c√≥ s·∫Øp x·∫øp t·ª± ƒë·ªông**.
 * - Khi c·∫ßn thao t√°c nh∆∞ l·∫•y ph·∫ßn t·ª≠ nh·ªè nh·∫•t/l·ªõn nh·∫•t, t√¨m g·∫ßn nh·∫•t (`ceiling`, `floor`, `higher`, `lower`).
 * - Khi c·∫ßn lo·∫°i b·ªè tr√πng l·∫∑p v√† ƒë·ªìng th·ªùi mu·ªën d·ªØ li·ªáu c√≥ th·ª© t·ª±.

 * üìå Nh∆∞·ª£c ƒëi·ªÉm:
 * - Ch·∫≠m h∆°n `HashSet` v√¨ ph·∫£i duy tr√¨ th·ª© t·ª± s·∫Øp x·∫øp (O(log n) so v·ªõi O(1) c·ªßa HashSet).
 * - Kh√¥ng cho ph√©p ph·∫ßn t·ª≠ null n·∫øu ph·∫£i so s√°nh.
 *
 * ‚ú® TreeSet tri·ªÉn khai interface `NavigableSet`, k·∫ø th·ª´a t·ª´ `SortedSet`, n√™n c√≥ nhi·ªÅu ph∆∞∆°ng th·ª©c n√¢ng cao:
 * - `.first()`, `.last()`, `.ceiling(E)`, `.floor(E)`, `.subSet()`, `.headSet()`, `.tailSet()`, v.v.
 *
 * üìò V√≠ d·ª• ·ª©ng d·ª•ng:
 * - L∆∞u danh s√°ch ƒëi·ªÉm s·ªë tƒÉng d·∫ßn.
 * - T√¨m ph·∫ßn t·ª≠ g·∫ßn nh·∫•t trong m·ªôt d√£y s·ªë.
 * - L·ªçc v√† s·∫Øp x·∫øp d·ªØ li·ªáu t·ª± ƒë·ªông kh√¥ng tr√πng l·∫∑p.
 */

public class TreeSetClass {
    public static void main(String[] args) {
        try {
            // 1. Kh·ªüi t·∫°o TreeSet
            TreeSet<String> productSet = new TreeSet<>();

            // 1. Th√™m s·∫£n ph·∫©m (.add)
            System.out.println("\n1. Add products:");
            productSet.add("C√† ph√™ ƒëen");
            productSet.add("Tr√† s·ªØa");
            productSet.add("B√°nh m√¨");
            productSet.add("Ph·ªü b√≤");
            productSet.add("C∆°m t·∫•m");
            productSet.add("G·ªèi cu·ªën");
            System.out.println("‚ûï Products: " + productSet);

            // 2. Th√™m ph·∫ßn t·ª≠ tr√πng (b·ªã b·ªè qua)
            System.out.println("\n2. Add duplicate 'Ph·ªü b√≤':");
            boolean added = productSet.add("Ph·ªü b√≤");
            System.out.println(added ? "‚úÖ Added" : "‚ùå Duplicate not added");
            System.out.println("üì¶ Current set: " + productSet);

            // 3. Xo√° s·∫£n ph·∫©m (.remove)
            System.out.println("\n3. Remove 'C∆°m t·∫•m':");
            productSet.remove("C∆°m t·∫•m");
            System.out.println("‚ùå After removal: " + productSet);

            // 4. Ki·ªÉm tra t·ªìn t·∫°i (.contains)
            System.out.println("\n4. Contains 'Tr√† s·ªØa'? " + productSet.contains("Tr√† s·ªØa"));

            // 5. Duy·ªát b·∫±ng for-each
            System.out.println("\n5. Browse with for-each:");
            for (String item : productSet) {
                System.out.println("üîπ " + item);
            }

            // 6. Duy·ªát b·∫±ng Iterator
            System.out.println("\n6. Browse with Iterator:");
            Iterator<String> iterator = productSet.iterator();
            while (iterator.hasNext()) {
                System.out.println("‚û°Ô∏è " + iterator.next());
            }

            // 7. L·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu v√† cu·ªëi (.first, .last)
            System.out.println("\n7. First and last product:");
            System.out.println("üìç First: " + productSet.first());
            System.out.println("üìç Last: " + productSet.last());

            // 8. T√¨m ph·∫ßn t·ª≠ l·ªõn h∆°n ho·∫∑c b·∫±ng (.ceiling) v√† nh·ªè h∆°n ho·∫∑c b·∫±ng (.floor)
            System.out.println("\n8. Ceiling & Floor of 'G·ªèi':");
            System.out.println("üîº Ceiling: " + productSet.ceiling("G·ªèi"));//Tr·∫£ v·ªÅ ph·∫ßn t·ª≠ nh·ªè nh·∫•t ‚â• "G·ªèi" trong TreeSet
            System.out.println("üîΩ Floor: " + productSet.floor("G·ªèi"));//Tr·∫£ v·ªÅ ph·∫ßn t·ª≠ l·ªõn nh·∫•t ‚â§ "G·ªèi" trong TreeSet

            // 9. ƒê·∫øm s·ªë l∆∞·ª£ng s·∫£n ph·∫©m (.size)
            System.out.println("\n9. Total products: " + productSet.size());

            // 10. Clone TreeSet (b·∫±ng constructor)
            TreeSet<String> cloneSet = new TreeSet<>(productSet);
            System.out.println("\n10. Clone set: " + cloneSet);

            // 11. Gi·ªØ l·∫°i ph·∫ßn t·ª≠ chung (.retainAll)
            TreeSet<String> keepSet = new TreeSet<>(Arrays.asList("Tr√† s·ªØa", "Ph·ªü b√≤"));
            productSet.retainAll(keepSet);
            System.out.println("\n11. After retainAll: " + productSet);

            // 12. Xo√° t·∫•t c·∫£ ph·∫ßn t·ª≠ c·ª• th·ªÉ (.removeAll)
            productSet.removeAll(Collections.singleton("Ph·ªü b√≤"));
            System.out.println("\n12. After remove 'Ph·ªü b√≤': " + productSet);

            // 13. Xo√° to√†n b·ªô (.clear)
            productSet.clear();
            System.out.println("\n13. After clear: " + productSet);

            // 14. Ki·ªÉm tra r·ªóng (.isEmpty)
            System.out.println("\n14. Is set empty? " + (productSet.isEmpty() ? "‚úÖ Yes" : "‚ùå No"));

        } catch (Exception ex) {
            System.out.println("‚ùó Error: " + ex.getMessage());
        }
    }
}
