package dataStructures;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
/**
 * ‚úÖ HashSet l√† m·ªôt c·∫•u tr√∫c d·ªØ li·ªáu trong Java ƒë∆∞·ª£c d√πng ƒë·ªÉ l∆∞u tr·ªØ t·∫≠p h·ª£p c√°c ph·∫ßn t·ª≠ duy nh·∫•t (kh√¥ng tr√πng l·∫∑p).
 *
 * üîπ ƒê·∫∑c ƒëi·ªÉm ch√≠nh:
 * - Kh√¥ng ch·ª©a ph·∫ßn t·ª≠ tr√πng l·∫∑p (duplicates s·∫Ω b·ªã lo·∫°i b·ªè).
 * - Kh√¥ng ƒë·∫£m b·∫£o th·ª© t·ª± c√°c ph·∫ßn t·ª≠ khi duy·ªát (kh√°c v·ªõi List).
 * - Cho ph√©p ch·ª©a ph·∫ßn t·ª≠ null (duy nh·∫•t m·ªôt ph·∫ßn t·ª≠ null).
 * - D·ª±a tr√™n b·∫£ng bƒÉm (hash table), n√™n thao t√°c th√™m, xo√°, ki·ªÉm tra t·ªìn t·∫°i r·∫•t nhanh (trung b√¨nh O(1)).
 *
 * üîß Khi n√™n d√πng HashSet:
 * - Khi c·∫ßn l∆∞u danh s√°ch c√°c gi√° tr·ªã duy nh·∫•t.
 * - Khi kh√¥ng quan t√¢m ƒë·∫øn th·ª© t·ª± ch√®n.
 * - Khi c·∫ßn ki·ªÉm tra s·ª± t·ªìn t·∫°i nhanh ch√≥ng c·ªßa ph·∫ßn t·ª≠.
 *
 * üìå Nh∆∞·ª£c ƒëi·ªÉm:
 * - Kh√¥ng truy c·∫≠p ƒë∆∞·ª£c ph·∫ßn t·ª≠ theo ch·ªâ s·ªë (index).
 * - Kh√¥ng gi·ªØ th·ª© t·ª± ch√®n (n·∫øu mu·ªën gi·ªØ th·ª© t·ª±, h√£y d√πng LinkedHashSet).
 *
 * ‚ú® HashSet tri·ªÉn khai interface Set n√™n h·ªó tr·ª£ c√°c ph∆∞∆°ng th·ª©c nh∆∞: add(), remove(), contains(), size(), isEmpty(), clear(), v.v.
 *
 * üìò V√≠ d·ª• ·ª©ng d·ª•ng:
 * - L·ªçc danh s√°ch t√™n b·ªã tr√πng.
 * - L∆∞u c√°c t·ª´ duy nh·∫•t trong m·ªôt vƒÉn b·∫£n.
 * - Ki·ªÉm tra ph·∫ßn t·ª≠ ƒë√£ xu·∫•t hi·ªán hay ch∆∞a.
 */

public class HastSetClass {
    public static void main(String[] args) {
        try {
            HashSet<String> foodSet = new HashSet<>();

            // 1. Th√™m m√≥n ƒÉn (.add)
            System.out.println("1Ô∏è‚É£ Add favorite foods:");
            foodSet.add("C∆°m g√†");
            foodSet.add("Ph·ªü b√≤");
            foodSet.add("B√∫n ch·∫£");
            foodSet.add("Ch√® b∆∞·ªüi");
            foodSet.add("B√°nh m√¨");
            foodSet.add("Tr√† s·ªØa");
            foodSet.add("Ph·ªü b√≤"); // Tr√πng, kh√¥ng th√™m
            System.out.println("üçΩÔ∏è Food list: " + foodSet);

            // 2. Ki·ªÉm tra s·ªë l∆∞·ª£ng (.size)
            System.out.println("\n2Ô∏è‚É£ Total items: " + foodSet.size());

            // 3. Ki·ªÉm tra m√≥n c√≥ t·ªìn t·∫°i kh√¥ng (.contains)
            System.out.println("\n3Ô∏è‚É£ Contains 'Tr√† s·ªØa'? " + (foodSet.contains("Tr√† s·ªØa") ? "‚úÖ Yes" : "‚ùå No"));

            // 4. X√≥a m√≥n ƒÉn c·ª• th·ªÉ (.remove)
            foodSet.remove("Ch√® b∆∞·ªüi");
            System.out.println("\n4Ô∏è‚É£ After removing 'Ch√® b∆∞·ªüi': " + foodSet);

            // 5. Duy·ªát HashSet b·∫±ng for-each
            System.out.println("\n5Ô∏è‚É£ Duy·ªát b·∫±ng for-each:");
            for (String food : foodSet) {
                System.out.println("üîπ " + food);
            }

            // 6. Duy·ªát b·∫±ng Iterator
            System.out.println("\n6Ô∏è‚É£ Duy·ªát b·∫±ng Iterator:");
            Iterator<String> iterator = foodSet.iterator();
            while (iterator.hasNext()) {
                System.out.println("‚û°Ô∏è " + iterator.next());
            }

            // 7. Chuy·ªÉn sang m·∫£ng (.toArray)
            System.out.println("\n7Ô∏è‚É£ Convert to array:");
            Object[] foodArray = foodSet.toArray();
            for (Object item : foodArray) {
                System.out.println("üçú " + item);
            }

            // 8. Clone HashSet (.clone)
            HashSet<String> clonedSet = (HashSet<String>) foodSet.clone();
            System.out.println("\n8Ô∏è‚É£ Cloned set: " + clonedSet);

            // 9. So s√°nh 2 set (.equals)
            System.out.println("\n9Ô∏è‚É£ Equals to cloned set? " + (foodSet.equals(clonedSet) ? "‚úÖ Equal" : "‚ùå Not equal"));

            // 10. G·ªôp set m·ªõi (.addAll)
            HashSet<String> moreFoods = new HashSet<>();
            moreFoods.add("G·ªèi cu·ªën");
            moreFoods.add("B√°nh x√®o");
            foodSet.addAll(moreFoods);
            System.out.println("\nüîü After merging more foods: " + foodSet);

            // 11. Gi·ªØ l·∫°i m√≥n chung (.retainAll)
            HashSet<String> keepList = new HashSet<>(Arrays.asList("Ph·ªü b√≤", "B√°nh m√¨", "G·ªèi cu·ªën"));
            foodSet.retainAll(keepList);
            System.out.println("\n1Ô∏è‚É£1Ô∏è‚É£ After retaining common foods: " + foodSet);

            // 12. X√≥a theo nh√≥m (.removeAll)
                foodSet.removeAll(Collections.singleton("Ph·ªü b√≤"));
            System.out.println("\n1Ô∏è‚É£2Ô∏è‚É£ After removing 'Ph·ªü b√≤': " + foodSet);
            foodSet.remove("Ph·ªü b√≤");

            // 13. X√≥a to√†n b·ªô (.clear)
            foodSet.clear();
            System.out.println("\n1Ô∏è‚É£3Ô∏è‚É£ After clearing set: " + foodSet);

            // 14. Ki·ªÉm tra r·ªóng (.isEmpty)
            System.out.println("\n1Ô∏è‚É£4Ô∏è‚É£ Is set empty? " + (foodSet.isEmpty() ? "‚úÖ Yes" : "‚ùå No"));

        } catch (Exception ex) {
            System.out.println("‚ùó Error: " + ex.getMessage());
        }
    }
}
