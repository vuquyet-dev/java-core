package StreamAPI;

import java.util.*;
import java.util.stream.*;
/**
 * üîπ STREAM API TRONG JAVA
 *
 * ‚úÖ Stream API l√† m·ªôt ph·∫ßn c·ªßa Java t·ª´ phi√™n b·∫£n Java 8,
 *    cho ph√©p x·ª≠ l√Ω c√°c t·∫≠p d·ªØ li·ªáu theo c√°ch **h√†m** (functional programming)
 *    v·ªõi **pipeline** g·ªìm nhi·ªÅu b∆∞·ªõc nh∆∞ filter, map, sort, collect...
 *
 * ‚úÖ M·ª•c ti√™u:
 *    - Vi·∫øt code ng·∫Øn g·ªçn, r√µ r√†ng v√† d·ªÖ b·∫£o tr√¨.
 *    - H·ªó tr·ª£ x·ª≠ l√Ω tu·∫ßn t·ª± ho·∫∑c song song (parallel).
 *
 * ‚úÖ ƒê·∫∑c ƒëi·ªÉm:
 *    - L√† m·ªôt pipeline (d√≤ng ch·∫£y d·ªØ li·ªáu).
 *    - D·ªØ li·ªáu g·ªëc **kh√¥ng b·ªã thay ƒë·ªïi** (b·∫•t bi·∫øn).
 *    - C√≥ th·ªÉ ho·∫°t ƒë·ªông **lazy** (ch·ªâ t√≠nh to√°n khi c·∫ßn thi·∫øt).
 *
 * ‚úÖ C√°c thao t√°c ch√≠nh:
 *    1. filter()     ‚Üí L·ªçc ph·∫ßn t·ª≠ theo ƒëi·ªÅu ki·ªán.
 *    2. map()        ‚Üí Bi·∫øn ƒë·ªïi ph·∫ßn t·ª≠.
 *    3. sorted()     ‚Üí S·∫Øp x·∫øp.
 *    4. distinct()   ‚Üí Lo·∫°i b·ªè tr√πng.
 *    5. limit(), skip() ‚Üí Ph√¢n trang.
 *    6. forEach()    ‚Üí Duy·ªát ph·∫ßn t·ª≠.
 *    7. collect()    ‚Üí G·ªôp k·∫øt qu·∫£ v·ªÅ List, Set, Map...
 *    8. reduce()     ‚Üí T√≠nh to√°n t·ªïng, t√≠ch, n·ªëi chu·ªói...
 *    9. anyMatch(), allMatch(), noneMatch() ‚Üí Ki·ªÉm tra ƒëi·ªÅu ki·ªán.
 *   10. findFirst(), findAny() ‚Üí L·∫•y ph·∫ßn t·ª≠.
 *   11. groupingBy(), partitioningBy() ‚Üí Nh√≥m d·ªØ li·ªáu.
 *   12. summaryStatistics() ‚Üí Th·ªëng k√™ nhanh.
 *
 * üìå L∆∞u √Ω:
 *    - Stream ch·ªâ ƒë∆∞·ª£c **duy·ªát m·ªôt l·∫ßn**.
 *    - Kh√¥ng n√™n d√πng ƒë·ªÉ thay th·∫ø m·ªçi `for-loop`, ch·ªâ d√πng khi ph√π h·ª£p.
 *
 * üìö V√≠ d·ª•: T√≠nh trung b√¨nh ƒëi·ªÉm c·ªßa sinh vi√™n, l·ªçc s·∫£n ph·∫©m gi√° > 100, nh√≥m theo lo·∫°i,...
 */

public class Main {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
                new Product(1, "iPhone", "Electronics", 999.99, 10),
                new Product(2, "MacBook", "Electronics", 1999.99, 5),
                new Product(3, "T-shirt", "Clothing", 19.99, 100),
                new Product(4, "Jeans", "Clothing", 39.99, 50),
                new Product(5, "AirPods", "Electronics", 199.99, 20),
                new Product(6, "Book", "Education", 9.99, 200),
                new Product(7, "Pen", "Education", 1.99, 500),
                new Product(8, "Shoes", "Clothing", 89.99, 30)
        );

        // 1. filter: L·ªçc s·∫£n ph·∫©m c√≥ gi√° > 100
        System.out.println("‚úÖ S·∫£n ph·∫©m gi√° > 100:");
        products.stream()
                .filter(p -> p.getPrice() > 100)
                .forEach(System.out::println);

        // 2. map: L·∫•y t√™n s·∫£n ph·∫©m
        System.out.println("\n‚úÖ T√™n c√°c s·∫£n ph·∫©m:");
        products.stream()
                .map(Product::getName)
                .forEach(System.out::println);

        // 3. sorted: S·∫Øp x·∫øp theo gi√° tƒÉng d·∫ßn
        System.out.println("\n‚úÖ S·∫Øp x·∫øp theo gi√° tƒÉng d·∫ßn:");
        products.stream()
                .sorted(Comparator.comparingDouble(Product::getPrice))
                .forEach(System.out::println);

        // 4. distinct: T√™n c√°c lo·∫°i s·∫£n ph·∫©m kh√¥ng tr√πng
        System.out.println("\n‚úÖ Lo·∫°i s·∫£n ph·∫©m (distinct):");
        products.stream()
                .map(Product::getCategory)
                .distinct()
                .forEach(System.out::println);

        // 5. limit + skip: B·ªè 2 s·∫£n ph·∫©m ƒë·∫ßu, l·∫•y 3 ti·∫øp theo
        System.out.println("\n‚úÖ L·∫•y 3 s·∫£n ph·∫©m sau khi b·ªè 2:");
        products.stream()
                .skip(2)
                .limit(3)
                .forEach(System.out::println);

        // 6. anyMatch, allMatch, noneMatch
        System.out.println("\n‚úÖ Ki·ªÉm tra ƒëi·ªÅu ki·ªán:");
        System.out.println("C√≥ s·∫£n ph·∫©m n√†o < 10$ kh√¥ng? " +
                products.stream().anyMatch(p -> p.getPrice() < 10));
        System.out.println("T·∫•t c·∫£ s·∫£n ph·∫©m > 1$? " +
                products.stream().allMatch(p -> p.getPrice() > 1));
        System.out.println("Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o gi√° √¢m? " +
                products.stream().noneMatch(p -> p.getPrice() < 0));

        // 7. findFirst + findAny
        System.out.println("\n‚úÖ S·∫£n ph·∫©m ƒë·∫ßu ti√™n:");
        products.stream().findFirst().ifPresent(System.out::println);

        System.out.println("‚úÖ B·∫•t k·ª≥ s·∫£n ph·∫©m n√†o thu·ªôc 'Clothing':");
        products.stream()
                .filter(p -> p.getCategory().equals("Clothing"))
                .findAny()
                .ifPresent(System.out::println);

        // 8. max + min
        System.out.println("\n‚úÖ S·∫£n ph·∫©m gi√° cao nh·∫•t:");
        products.stream()
                .max(Comparator.comparingDouble(Product::getPrice))
                .ifPresent(System.out::println);

        System.out.println("‚úÖ S·∫£n ph·∫©m gi√° th·∫•p nh·∫•t:");
        products.stream()
                .min(Comparator.comparingDouble(Product::getPrice))
                .ifPresent(System.out::println);

        // 9. reduce: T√≠nh t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
        int totalQuantity = products.stream()
                .map(Product::getQuantity)
                .reduce(0, Integer::sum);
        System.out.println("\n‚úÖ T·ªïng s·ªë l∆∞·ª£ng t·∫•t c·∫£ s·∫£n ph·∫©m: " + totalQuantity);

        // 10. collect to List
        System.out.println("\n‚úÖ Danh s√°ch s·∫£n ph·∫©m 'Electronics':");
        List<Product> electronics = products.stream()
                .filter(p -> p.getCategory().equals("Electronics"))
                .collect(Collectors.toList());
        electronics.forEach(System.out::println);

        // 11. groupingBy: Nh√≥m s·∫£n ph·∫©m theo category
        System.out.println("\n‚úÖ Nh√≥m s·∫£n ph·∫©m theo lo·∫°i:");
        Map<String, List<Product>> grouped = products.stream()
                .collect(Collectors.groupingBy(Product::getCategory));
        grouped.forEach((k, v) -> {
            System.out.println("üî∏ " + k + ":");
            v.forEach(p -> System.out.println("   - " + p));
        });

        // 12. partitioningBy: Chia s·∫£n ph·∫©m >100 v√† c√≤n l·∫°i
        System.out.println("\n‚úÖ Chia s·∫£n ph·∫©m theo gi√° > 100:");
        Map<Boolean, List<Product>> partitioned = products.stream()
                .collect(Collectors.partitioningBy(p -> p.getPrice() > 100));
        partitioned.forEach((k, v) -> {
            System.out.println(k ? "üî∏ > 100$:" : "üîπ <= 100$:");
            v.forEach(p -> System.out.println("   - " + p));
        });

        // 13. joining: Gh√©p t√™n s·∫£n ph·∫©m th√†nh chu·ªói
        String names = products.stream()
                .map(Product::getName)
                .collect(Collectors.joining(", "));
        System.out.println("\n‚úÖ Danh s√°ch t√™n s·∫£n ph·∫©m: " + names);

        // 14. summary statistics
        DoubleSummaryStatistics stats = products.stream()
                .collect(Collectors.summarizingDouble(Product::getPrice));
        System.out.println("\n‚úÖ Th·ªëng k√™ gi√° s·∫£n ph·∫©m:");
        System.out.println("T·ªïng: " + stats.getSum());
        System.out.println("Trung b√¨nh: " + stats.getAverage());
        System.out.println("Min: " + stats.getMin());
        System.out.println("Max: " + stats.getMax());
    }
}
