package Asynchronous;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
/*
 * ==========================
 * üìå GI·ªöI THI·ªÜU: ASYNCHRONOUS TRONG JAVA
 * ==========================
 *
 * ‚úÖ Asynchronous (b·∫•t ƒë·ªìng b·ªô) l√† m·ªôt k·ªπ thu·∫≠t cho ph√©p ch∆∞∆°ng tr√¨nh th·ª±c hi·ªán nhi·ªÅu t√°c v·ª• c√πng l√∫c
 * m√† kh√¥ng c·∫ßn ph·∫£i ch·ªù t·ª´ng t√°c v·ª• ho√†n th√†nh theo th·ª© t·ª± nh∆∞ c√°ch x·ª≠ l√Ω ƒë·ªìng b·ªô (synchronous).
 * Trong b·∫•t ƒë·ªìng b·ªô, m·ªôt t√°c v·ª• c√≥ th·ªÉ "ch·∫°y n·ªÅn", v√† ch∆∞∆°ng tr√¨nh v·∫´n ti·∫øp t·ª•c x·ª≠ l√Ω c√°c t√°c v·ª• kh√°c.
 *
 * üîπ Java h·ªó tr·ª£ b·∫•t ƒë·ªìng b·ªô th√¥ng qua nhi·ªÅu c√¥ng c·ª•:
 *   - Thread (lu·ªìng)
 *   - ExecutorService (b·ªô ƒëi·ªÅu ph·ªëi lu·ªìng)
 *   - CompletableFuture (t·ª´ Java 8, h·ªó tr·ª£ fluent API ƒë·ªÉ x·ª≠ l√Ω chu·ªói t√°c v·ª• b·∫•t ƒë·ªìng b·ªô)
 *   - Reactive programming v·ªõi Spring WebFlux (d·ª±a tr√™n Project Reactor)
 *
 * ==========================
 * ‚úÖ ∆ØU ƒêI·ªÇM C·ª¶A ASYNCHRONOUS
 * ==========================
 * ‚ú® TƒÉng hi·ªáu su·∫•t h·ªá th·ªëng: Nhi·ªÅu t√°c v·ª• ch·∫°y song song ‚Üí t·∫≠n d·ª•ng CPU t·ªët h∆°n.
 * ‚ú® Kh√¥ng ch·∫∑n lu·ªìng ch√≠nh: ·ª®ng d·ª•ng kh√¥ng b·ªã ƒë·ª©ng, ƒë·∫∑c bi·ªát quan tr·ªçng v·ªõi UI ho·∫∑c API.
 * ‚ú® Ph√π h·ª£p v·ªõi c√°c t√°c v·ª• I/O, g·ªçi API, truy v·∫•n DB, x·ª≠ l√Ω n·ªÅn...
 *
 * ==========================
 * ‚ö†Ô∏è NH∆Ø·ª¢C ƒêI·ªÇM C·ª¶A ASYNCHRONOUS
 * ==========================
 * ‚ùó Kh√≥ debug h∆°n so v·ªõi ƒë·ªìng b·ªô v√¨ lu·ªìng x·ª≠ l√Ω kh√¥ng theo th·ª© t·ª± tuy·∫øn t√≠nh.
 * ‚ùó Qu·∫£n l√Ω l·ªói v√† ƒë·ªìng b·ªô k·∫øt qu·∫£ gi·ªØa c√°c t√°c v·ª• tr·ªü n√™n ph·ª©c t·∫°p.
 * ‚ùó Vi·∫øt code b·∫•t ƒë·ªìng b·ªô c·∫ßn hi·ªÉu r√µ v·ªÅ callback, future, promise ho·∫∑c reactive stream.
 *
 * ==========================
 * ‚ú® K·∫æT LU·∫¨N
 * ==========================
 * Vi·ªác s·ª≠ d·ª•ng b·∫•t ƒë·ªìng b·ªô ƒë√∫ng c√°ch s·∫Ω gi√∫p ·ª©ng d·ª•ng ph·∫£n h·ªìi nhanh h∆°n, ti·∫øt ki·ªám t√†i nguy√™n v√†
 * mang l·∫°i tr·∫£i nghi·ªám ng∆∞·ªùi d√πng t·ªët h∆°n. Tuy nhi√™n, n√≥ ƒë√≤i h·ªèi ki·∫øn th·ª©c k·ªπ thu·∫≠t v·ªØng ch·∫Øc ƒë·ªÉ
 * x·ª≠ l√Ω t·ªët c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn ƒë·ªìng b·ªô, x·ª≠ l√Ω l·ªói, v√† maintain code.
 */

public class AsyncOrderSystem {

    // M√¥ ph·ªèng ki·ªÉm tra kho (m·∫•t 2 gi√¢y)
    public static CompletableFuture<String> checkInventory(String product) {//T·∫°o m·ªôt CompletableFuture<String>.
        return CompletableFuture.supplyAsync(() -> {// T·∫°o m·ªôt t√°c v·ª• ch·∫°y b·∫•t ƒë·ªìng b·ªô trong background thread, ƒë·ªìng th·ªùi tr·∫£ v·ªÅ gi√° tr·ªã sau khi x·ª≠ l√Ω.
            //lambda kh√¥ng nh·∫≠n ƒë·∫ßu v√†o, tr·∫£ v·ªÅ l√† 1 bi·ªÉu th·ª©c
            simulateDelay(2);//G·ªçi h√†m m√¥ ph·ªèng ƒë·ªô tr·ªÖ
            System.out.println("‚úÖ Ki·ªÉm tra kho cho s·∫£n ph·∫©m: " + product);
            return "C√≤n h√†ng";//Do ƒë√¢y l√† supplyAsync, n√™n b·∫°n ph·∫£i c√≥ return.
        });
    }

    // M√¥ ph·ªèng x·ª≠ l√Ω thanh to√°n (m·∫•t 3 gi√¢y)
    public static CompletableFuture<String> processPayment(String user) {
        return CompletableFuture.supplyAsync(() -> {
            simulateDelay(3);
            System.out.println("üí≥ X·ª≠ l√Ω thanh to√°n cho ng∆∞·ªùi d√πng: " + user);
            return "Thanh to√°n th√†nh c√¥ng";
        });
    }

    // M√¥ ph·ªèng g·ª≠i email (m·∫•t 1 gi√¢y)
    public static CompletableFuture<Void> sendConfirmationEmail(String user) {//T√°c v·ª• kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£, n√™n d√πng CompletableFuture<Void>.
        return CompletableFuture.runAsync(() -> {//runAsync() d√πng ƒë·ªÉ ch·∫°y m·ªôt lambda expression kh√¥ng tham s·ªë (kh√¥ng ƒë·∫ßu v√†o, kh√¥ng tr·∫£ v·ªÅ g√¨).
            simulateDelay(1);
            System.out.println("üìß G·ª≠i email x√°c nh·∫≠n ƒë·∫øn: " + user);
        });
    }

    // M√¥ ph·ªèng ƒë·ªô tr·ªÖ
    public static void simulateDelay(int seconds) {
        try {
            TimeUnit.SECONDS.sleep(seconds);//TimeUnit.SECONDS.sleep(3); t∆∞∆°ng ƒë∆∞∆°ng Thread.sleep(3000);
        } catch (InterruptedException e) {
            throw new IllegalStateException(e);
        }
    }

    // H√†m main: th·ª±c hi·ªán to√†n b·ªô quy tr√¨nh ƒë·∫∑t h√†ng
    public static void main(String[] args) throws ExecutionException, InterruptedException {
        String product = "Laptop Dell";
        String user = "nguyenvana@example.com";

        System.out.println("üöÄ B·∫Øt ƒë·∫ßu ƒë·∫∑t h√†ng...");

        // B∆∞·ªõc 1: Ki·ªÉm tra kho v√† thanh to√°n ch·∫°y song song
        CompletableFuture<String> inventoryFuture = checkInventory(product);    //m√¥ ph·ªèng ki·ªÉm tra t·ªìn kho (2 gi√¢y)
        CompletableFuture<String> paymentFuture = processPayment(user);         //m√¥ ph·ªèng x·ª≠ l√Ω thanh to√°n (3 gi√¢y)

        // B∆∞·ªõc 2: Khi c·∫£ 2 ho√†n t·∫•t, ti·∫øp t·ª•c g·ª≠i email x√°c nh·∫≠n
        CompletableFuture<Void> orderProcess = CompletableFuture.allOf(inventoryFuture, paymentFuture)//ƒê·ª£i t·∫•t c·∫£ CompletableFuture b√™n trong ho√†n t·∫•t(inventoryFuture, paymentFuture), xong th√¨ m·ªõi ti·∫øp t·ª•c.
                .thenRun(() -> {//Khi ho√†n t·∫•t t·∫•t c·∫£ Future, ch·∫°y ti·∫øp ƒëo·∫°n code kh√¥ng c·∫ßn k·∫øt qu·∫£ tr·∫£ v·ªÅ.
                    try {
                        //  L·∫•y k·∫øt qu·∫£ t·ª´ 2 CompletableFuture
                        String inventoryStatus = inventoryFuture.get();//.get() ch·ªù v√† tr·∫£ k·∫øt qu·∫£ (blocking)
                        String paymentStatus = paymentFuture.get();

                        System.out.println("üì¶ Tr·∫°ng th√°i kho: " + inventoryStatus);
                        System.out.println("üí∞ Tr·∫°ng th√°i thanh to√°n: " + paymentStatus);

                        // G·ª≠i email x√°c nh·∫≠n
                        sendConfirmationEmail(user).join();//.join() ƒë·ªÉ ch·ªù g·ª≠i xong email tr∆∞·ªõc khi in "Th√†nh c√¥ng".

                        System.out.println("üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng!");
                    } catch (Exception e) {
                        System.out.println("‚ùå C√≥ l·ªói x·∫£y ra: " + e.getMessage());
                    }
                });

        // ƒê·ª£i t·∫•t c·∫£ ho√†n t·∫•t
        orderProcess.get();
    }
}
